@startuml

interface Protocol {
    + <T> Exporter<T> export(Invoker<T> invoker)
    + Invoker<T> refer(Class<T> type, URL url)
    + void destroy()
}

abstract class AbstractProtocol implements Protocol {
    # Map<String, Exporter<?>> exporterMap
    # static String serviceKey(URL url)
}

class InjvmProtocol extends AbstractProtocol {
    + <T> Exporter<T> export(Invoker<T> invoker) // new InjvmExporter<T>
    + <T> Invoker<T> refer(Class<T> serviceType, URL url) // new InjvmInvoker<T>
}

class DubboProtocol extends AbstractProtocol {
    - Map<String, ExchangeServer> serverMap
    - Map<String, ReferenceCountExchangeClient> referenceClientMap
    - ExchangeHandler requestHandler // 真正的Netty请求处理器
    ~ Invoker<?> getInvoker(Channel channel, Invocation inv)
}
@enduml